{"mappings":"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","sources":["<anon>","index.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", ()=>{\n    // Variables\n    const baseDeDatos = [\n        {\n            id: 1,\n            nombre: \"Figura\",\n            precio: 100.000,\n            imagen: \"./img/figura.jpg\"\n        },\n        {\n            id: 2,\n            nombre: \"Mug\",\n            precio: 50.000,\n            imagen: \"./img/mug.png\"\n        },\n        {\n            id: 3,\n            nombre: \"Figura 2\",\n            precio: 200.000,\n            imagen: \"./img/figura2.jpg\"\n        },\n        {\n            id: 4,\n            nombre: \"Figura 3\",\n            precio: 300.000,\n            imagen: \"./img/figura3.jpg\"\n        }\n    ];\n    let carrito = [];\n    const divisa = \"$\";\n    const DOMitems = document.querySelector(\"#items\");\n    const DOMcarrito = document.querySelector(\"#carrito\");\n    const DOMtotal = document.querySelector(\"#total\");\n    const DOMbotonVaciar = document.querySelector(\"#boton-vaciar\");\n    const miLocalStorage = window.localStorage;\n    // Funciones\n    /**\r\n    * Dibuja todos los productos a partir de la base de datos. No confundir con el carrito\r\n    */ function renderizarProductos() {\n        baseDeDatos.forEach((info)=>{\n            // Estructura\n            const miNodo = document.createElement(\"div\");\n            miNodo.classList.add(\"card\", \"col-sm-4\");\n            // Body\n            const miNodoCardBody = document.createElement(\"div\");\n            miNodoCardBody.classList.add(\"card-body\");\n            // Titulo\n            const miNodoTitle = document.createElement(\"h5\");\n            miNodoTitle.classList.add(\"card-title\");\n            miNodoTitle.textContent = info.nombre;\n            // Imagen\n            const miNodoImagen = document.createElement(\"img\");\n            miNodoImagen.classList.add(\"img-fluid\");\n            miNodoImagen.setAttribute(\"src\", info.imagen);\n            // Precio\n            const miNodoPrecio = document.createElement(\"p\");\n            miNodoPrecio.classList.add(\"card-text\");\n            miNodoPrecio.textContent = `${info.precio}${divisa}`;\n            // Boton\n            const miNodoBoton = document.createElement(\"button\");\n            miNodoBoton.classList.add(\"btn\", \"btn-primary\");\n            miNodoBoton.textContent = \"+\";\n            miNodoBoton.setAttribute(\"marcador\", info.id);\n            miNodoBoton.addEventListener(\"click\", anyadirProductoAlCarrito);\n            // Insertamos\n            miNodoCardBody.appendChild(miNodoImagen);\n            miNodoCardBody.appendChild(miNodoTitle);\n            miNodoCardBody.appendChild(miNodoPrecio);\n            miNodoCardBody.appendChild(miNodoBoton);\n            miNodo.appendChild(miNodoCardBody);\n            DOMitems.appendChild(miNodo);\n        });\n    }\n    /**\r\n    * Evento para añadir un producto al carrito de la compra\r\n    */ function anyadirProductoAlCarrito(evento) {\n        // Anyadimos el Nodo a nuestro carrito\n        carrito.push(evento.target.getAttribute(\"marcador\"));\n        // Actualizamos el carrito\n        renderizarCarrito();\n        // Actualizamos el LocalStorage\n        guardarCarritoEnLocalStorage();\n    }\n    /**\r\n    * Dibuja todos los productos guardados en el carrito\r\n    */ function renderizarCarrito() {\n        // Vaciamos todo el html\n        DOMcarrito.textContent = \"\";\n        // Quitamos los duplicados\n        const carritoSinDuplicados = [\n            ...new Set(carrito)\n        ];\n        // Generamos los Nodos a partir de carrito\n        carritoSinDuplicados.forEach((item)=>{\n            // Obtenemos el item que necesitamos de la variable base de datos\n            const miItem = baseDeDatos.filter((itemBaseDatos)=>{\n                // ¿Coincide las id? Solo puede existir un caso\n                return itemBaseDatos.id === parseInt(item);\n            });\n            // Cuenta el número de veces que se repite el producto\n            const numeroUnidadesItem = carrito.reduce((total, itemId)=>{\n                // ¿Coincide las id? Incremento el contador, en caso contrario no mantengo\n                return itemId === item ? total += 1 : total;\n            }, 0);\n            // Creamos el nodo del item del carrito\n            const miNodo = document.createElement(\"li\");\n            miNodo.classList.add(\"list-group-item\", \"text-right\", \"mx-2\");\n            miNodo.textContent = `${numeroUnidadesItem} x ${miItem[0].nombre} - ${miItem[0].precio}${divisa}`;\n            // Boton de borrar\n            const miBoton = document.createElement(\"button\");\n            miBoton.classList.add(\"btn\", \"btn-danger\", \"mx-5\");\n            miBoton.textContent = \"X\";\n            miBoton.style.marginLeft = \"1rem\";\n            miBoton.dataset.item = item;\n            miBoton.addEventListener(\"click\", borrarItemCarrito);\n            // Mezclamos nodos\n            miNodo.appendChild(miBoton);\n            DOMcarrito.appendChild(miNodo);\n        });\n        // Renderizamos el precio total en el HTML\n        DOMtotal.textContent = calcularTotal();\n    }\n    /**\r\n    * Evento para borrar un elemento del carrito\r\n    */ function borrarItemCarrito(evento) {\n        // Obtenemos el producto ID que hay en el boton pulsado\n        const id = evento.target.dataset.item;\n        // Borramos todos los productos\n        carrito = carrito.filter((carritoId)=>{\n            return carritoId !== id;\n        });\n        // volvemos a renderizar\n        renderizarCarrito();\n        // Actualizamos el LocalStorage\n        guardarCarritoEnLocalStorage();\n    }\n    /**\r\n     * Calcula el precio total teniendo en cuenta los productos repetidos\r\n     */ function calcularTotal() {\n        // Recorremos el array del carrito\n        return carrito.reduce((total, item)=>{\n            // De cada elemento obtenemos su precio\n            const miItem = baseDeDatos.filter((itemBaseDatos)=>{\n                return itemBaseDatos.id === parseInt(item);\n            });\n            // Los sumamos al total\n            return total + miItem[0].precio;\n        }, 0).toFixed(2);\n    }\n    /**\r\n    * Varia el carrito y vuelve a dibujarlo\r\n    */ function vaciarCarrito() {\n        // Limpiamos los productos guardados\n        carrito = [];\n        // Renderizamos los cambios\n        renderizarCarrito();\n        // Borra LocalStorage\n        localStorage.clear();\n    }\n    function guardarCarritoEnLocalStorage() {\n        miLocalStorage.setItem(\"carrito\", JSON.stringify(carrito));\n    }\n    function cargarCarritoDeLocalStorage() {\n        // ¿Existe un carrito previo guardado en LocalStorage?\n        if (miLocalStorage.getItem(\"carrito\") !== null) // Carga la información\n        carrito = JSON.parse(miLocalStorage.getItem(\"carrito\"));\n    }\n    // Eventos\n    DOMbotonVaciar.addEventListener(\"click\", vaciarCarrito);\n    // Inicio\n    cargarCarritoDeLocalStorage();\n    renderizarProductos();\n    renderizarCarrito();\n});\n\n//# sourceMappingURL=index.21c00437.js.map\n","document.addEventListener('DOMContentLoaded', () => {\r\n\r\n    // Variables\r\n    const baseDeDatos = [\r\n        {\r\n            id: 1,\r\n            nombre: 'Figura',\r\n            precio: 100.000,\r\n            imagen: './img/figura.jpg'\r\n            \r\n        },\r\n        {\r\n            id: 2,\r\n            nombre: 'Mug',\r\n            precio: 50.000,\r\n            imagen: './img/mug.png'\r\n        },\r\n        {\r\n            id: 3,\r\n            nombre: 'Figura 2',\r\n            precio: 200.000,\r\n            imagen: './img/figura2.jpg'\r\n        },\r\n        {\r\n            id: 4,\r\n            nombre: 'Figura 3',\r\n            precio: 300.000,\r\n            imagen: './img/figura3.jpg'\r\n        }\r\n\r\n    ];\r\n\r\n    let carrito = [];\r\n    const divisa = '$';\r\n    const DOMitems = document.querySelector('#items');\r\n    const DOMcarrito = document.querySelector('#carrito');\r\n    const DOMtotal = document.querySelector('#total');\r\n    const DOMbotonVaciar = document.querySelector('#boton-vaciar');\r\n    const miLocalStorage = window.localStorage;\r\n\r\n    // Funciones\r\n\r\n    /**\r\n    * Dibuja todos los productos a partir de la base de datos. No confundir con el carrito\r\n    */\r\n    function renderizarProductos() {\r\n        baseDeDatos.forEach((info) => {\r\n            // Estructura\r\n            const miNodo = document.createElement('div');\r\n            miNodo.classList.add('card', 'col-sm-4');\r\n            // Body\r\n            const miNodoCardBody = document.createElement('div');\r\n            miNodoCardBody.classList.add('card-body');\r\n            // Titulo\r\n            const miNodoTitle = document.createElement('h5');\r\n            miNodoTitle.classList.add('card-title');\r\n            miNodoTitle.textContent = info.nombre;\r\n            // Imagen\r\n            const miNodoImagen = document.createElement('img');\r\n            miNodoImagen.classList.add('img-fluid');\r\n            miNodoImagen.setAttribute('src', info.imagen);\r\n            // Precio\r\n            const miNodoPrecio = document.createElement('p');\r\n            miNodoPrecio.classList.add('card-text');\r\n            miNodoPrecio.textContent = `${info.precio}${divisa}`;\r\n            // Boton\r\n            const miNodoBoton = document.createElement('button');\r\n            miNodoBoton.classList.add('btn', 'btn-primary');\r\n            miNodoBoton.textContent = '+';\r\n            miNodoBoton.setAttribute('marcador', info.id);\r\n            miNodoBoton.addEventListener('click', anyadirProductoAlCarrito);\r\n            // Insertamos\r\n            miNodoCardBody.appendChild(miNodoImagen);\r\n            miNodoCardBody.appendChild(miNodoTitle);\r\n            miNodoCardBody.appendChild(miNodoPrecio);\r\n            miNodoCardBody.appendChild(miNodoBoton);\r\n            miNodo.appendChild(miNodoCardBody);\r\n            DOMitems.appendChild(miNodo);\r\n        });\r\n    }\r\n\r\n    /**\r\n    * Evento para añadir un producto al carrito de la compra\r\n    */\r\n    function anyadirProductoAlCarrito(evento) {\r\n        // Anyadimos el Nodo a nuestro carrito\r\n        carrito.push(evento.target.getAttribute('marcador'))\r\n        // Actualizamos el carrito\r\n        renderizarCarrito();\r\n        // Actualizamos el LocalStorage\r\n        guardarCarritoEnLocalStorage();\r\n    }\r\n\r\n    /**\r\n    * Dibuja todos los productos guardados en el carrito\r\n    */\r\n    function renderizarCarrito() {\r\n        // Vaciamos todo el html\r\n        DOMcarrito.textContent = '';\r\n        // Quitamos los duplicados\r\n        const carritoSinDuplicados = [...new Set(carrito)];\r\n        // Generamos los Nodos a partir de carrito\r\n        carritoSinDuplicados.forEach((item) => {\r\n            // Obtenemos el item que necesitamos de la variable base de datos\r\n            const miItem = baseDeDatos.filter((itemBaseDatos) => {\r\n                // ¿Coincide las id? Solo puede existir un caso\r\n                return itemBaseDatos.id === parseInt(item);\r\n            });\r\n            // Cuenta el número de veces que se repite el producto\r\n            const numeroUnidadesItem = carrito.reduce((total, itemId) => {\r\n                // ¿Coincide las id? Incremento el contador, en caso contrario no mantengo\r\n                return itemId === item ? total += 1 : total;\r\n            }, 0);\r\n            // Creamos el nodo del item del carrito\r\n            const miNodo = document.createElement('li');\r\n            miNodo.classList.add('list-group-item', 'text-right', 'mx-2');\r\n            miNodo.textContent = `${numeroUnidadesItem} x ${miItem[0].nombre} - ${miItem[0].precio}${divisa}`;\r\n            // Boton de borrar\r\n            const miBoton = document.createElement('button');\r\n            miBoton.classList.add('btn', 'btn-danger', 'mx-5');\r\n            miBoton.textContent = 'X';\r\n            miBoton.style.marginLeft = '1rem';\r\n            miBoton.dataset.item = item;\r\n            miBoton.addEventListener('click', borrarItemCarrito);\r\n            // Mezclamos nodos\r\n            miNodo.appendChild(miBoton);\r\n            DOMcarrito.appendChild(miNodo);\r\n        });\r\n        // Renderizamos el precio total en el HTML\r\n        DOMtotal.textContent = calcularTotal();\r\n    }\r\n\r\n    /**\r\n    * Evento para borrar un elemento del carrito\r\n    */\r\n    function borrarItemCarrito(evento) {\r\n        // Obtenemos el producto ID que hay en el boton pulsado\r\n        const id = evento.target.dataset.item;\r\n        // Borramos todos los productos\r\n        carrito = carrito.filter((carritoId) => {\r\n            return carritoId !== id;\r\n        });\r\n        // volvemos a renderizar\r\n        renderizarCarrito();\r\n        // Actualizamos el LocalStorage\r\n        guardarCarritoEnLocalStorage();\r\n\r\n    }\r\n\r\n    /**\r\n     * Calcula el precio total teniendo en cuenta los productos repetidos\r\n     */\r\n    function calcularTotal() {\r\n        // Recorremos el array del carrito\r\n        return carrito.reduce((total, item) => {\r\n            // De cada elemento obtenemos su precio\r\n            const miItem = baseDeDatos.filter((itemBaseDatos) => {\r\n                return itemBaseDatos.id === parseInt(item);\r\n            });\r\n            // Los sumamos al total\r\n            return total + miItem[0].precio;\r\n        }, 0).toFixed(2);\r\n    }\r\n\r\n    /**\r\n    * Varia el carrito y vuelve a dibujarlo\r\n    */\r\n    function vaciarCarrito() {\r\n        // Limpiamos los productos guardados\r\n        carrito = [];\r\n        // Renderizamos los cambios\r\n        renderizarCarrito();\r\n        // Borra LocalStorage\r\n        localStorage.clear();\r\n\r\n    }\r\n\r\n    function guardarCarritoEnLocalStorage () {\r\n        miLocalStorage.setItem('carrito', JSON.stringify(carrito));\r\n    }\r\n\r\n    function cargarCarritoDeLocalStorage () {\r\n        // ¿Existe un carrito previo guardado en LocalStorage?\r\n        if (miLocalStorage.getItem('carrito') !== null) {\r\n            // Carga la información\r\n            carrito = JSON.parse(miLocalStorage.getItem('carrito'));\r\n        }\r\n    }\r\n\r\n    // Eventos\r\n    DOMbotonVaciar.addEventListener('click', vaciarCarrito);\r\n\r\n    // Inicio\r\n    cargarCarritoDeLocalStorage();\r\n    renderizarProductos();\r\n    renderizarCarrito();\r\n});"],"names":["document","addEventListener","baseDeDatos","id","nombre","precio","imagen","carrito","DOMitems","querySelector","DOMcarrito","DOMtotal","DOMbotonVaciar","miLocalStorage","window","localStorage","anyadirProductoAlCarrito","evento","push","target","getAttribute","renderizarCarrito","guardarCarritoEnLocalStorage","textContent","carritoSinDuplicados","Set","forEach","item","miItem","filter","itemBaseDatos","parseInt","numeroUnidadesItem","reduce","total","itemId","miNodo","createElement","classList","add","miBoton","style","marginLeft","dataset","borrarItemCarrito","appendChild","toFixed","carritoId","setItem","JSON","stringify","clear","getItem","parse","info","miNodoCardBody","miNodoTitle","miNodoImagen","setAttribute","miNodoPrecio","miNodoBoton"],"version":3,"file":"index.21c00437.js.map"}